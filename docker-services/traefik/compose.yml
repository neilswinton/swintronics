

services:
  traefik:
    image: traefik:3.5
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=${TZ:?Please set the TZ environment variable}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN:?Please set the CF_DNS_API_TOKEN environment variable}
      - CERT_RESOLVER=${CERT_RESOLVER:?Please set the CERT_RESOLVER environment variable}
      - SERVER_DOMAIN=${SERVER_DOMAIN:?Please set the SERVER_DOMAIN environment variable}
    network_mode: "service:tailscale"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik.yml:/traefik.yml:ro
      - ./data/configs:/configs:ro
      - ${CERT_RESOLVER}-certs:/certs:rw
      - ./data/logs:/logs:rw
    labels:
        - "traefik.http.services.dummy.loadbalancer.server.port=8080"
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik.${SERVER_DOMAIN}`)"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.tls.certresolver=${CERT_RESOLVER}"
        

    healthcheck:
      test: traefik healthcheck || exit 1
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 20s
    depends_on:
      tailscale:
        condition: service_started # service_healthy with tailscale healthcheck

  whoami:
    container_name: simple-service
    image: traefik/whoami
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.whoami.rule=Host(`whoami.${SERVER_DOMAIN}`)"
        - "traefik.http.routers.whoami.entrypoints=websecure"
        - "traefik.http.routers.whoami.tls.certresolver=${CERT_RESOLVER}"
    profiles: ["debug"]

volumes:
  production-certs: null
  staging-certs: null

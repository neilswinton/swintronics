#cloud-config
# This example assumes a default Ubuntu cloud image, which should contain
# the required software to be managed remotely by Ansible.

package_update: true
package_upgrade: true

#Do not accept SSH password authention
ssh_pwauth: false

timezone: ${timezone}

# TODO: Unattended security upgrades: https://linuxgenie.net/set-up-automatic-updates-ubuntu-24-04/
packages:
  # - apt-config-auto-update  # https://linuxcapable.com/how-to-configure-unattended-upgrades-on-ubuntu-linux/
  - apache2-utils
  - apt-transport-https
  - ca-certificates
  - curl
  - git
  - gnupg
  - gnupg-agent
  - jq
  - software-properties-common
  # - unattended-upgrades

# Enable ipv4 forwarding, required on CIS hardened machines
write_files:
  - path: /etc/sysctl.d/99-enable-ipv4-forwarding.conf
    content: |
      net.ipv4.conf.all.forwarding=1

# create the docker group
groups:
  - docker

users:
  - name: "${admin_user}"
    sudo: "ALL=(ALL) NOPASSWD:ALL"
    groups: [sudo, adm, docker]
    shell: /bin/bash
    ssh_authorized_keys:
    - "${admin_public_key}"

# Install Docker, for production, consider pinning to stable versions

runcmd:
  - |
    # Install and start docker
    LOGFILE="/var/log/docker-init.log"
    {
    echo "Installing docker"
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | DEBIAN_FRONTEND=noninteractive apt-key add -
    DEBIAN_FRONTEND=noninteractive add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    DEBIAN_FRONTEND=noninteractive apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io
    systemctl start docker
    systemctl enable docker
    } >> "$LOGFILE" 2>&1


  - |
    # Configure the data disk on the system
    LOGFILE="/var/log/disk-init.log"
    {

    echo "[INFO] Starting disk initialization at $(date)"

    # Identify unformatted disk (excluding root)
    ROOT_DISK=$(lsblk -dn -o NAME | head -n1)
    UNFORMATTED_DISK=$(lsblk -dn -o NAME | grep -v "$ROOT_DISK" | head -n1)
    DEVICE="/dev/$${UNFORMATTED_DISK}"

    echo "[INFO] Target device: $$DEVICE"

    # Partition and format as Btrfs
    parted --script "$DEVICE" mklabel gpt mkpart primary btrfs 0% 100%
    sleep 2  # allow kernel to register partition
    mkfs.btrfs "$${DEVICE}1"

    echo "[INFO] Formatted $${DEVICE}1 as Btrfs"

    # Mount and persist
    mkdir -p ${mountpoint}
    echo "$${DEVICE}1 ${mountpoint} btrfs defaults,nofail 0 0" >> /etc/fstab
    systemctl daemon-reload
    mount -a

    echo "[INFO] Mounted $${DEVICE}1 to ${mountpoint}"
    mkdir -p ${immich_data_location}
    mkdir -p ${paperless_data_location}
    chown -R ${admin_user}:${admin_user} ${mountpoint}
    } >> "$LOGFILE" 2>&1
    echo "Data disk configuration is complete"

  - |
    LOGFILE="/var/log/docker-init.log"
    {
    # Install infisical CLI
    curl -1sLf 'https://artifacts-cli.infisical.com/setup.deb.sh' | bash -
    apt-get update && apt-get install -y infisical
    echo "Infisical CLI installation is complete"
    } >> "$LOGFILE" 2>&1

  - |
    su --login ${admin_user} --command 'git clone ${repo} '

 # User-provided custom runcmd commands
  # Append user-provided custom runcmd commands
%{ if custom_userdata != "" ~}
%{ for cmd in custom_userdata ~}
  - ${cmd}
%{ endfor ~}
%{ endif ~}
